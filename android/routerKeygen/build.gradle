apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.0'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "org.exobel.routerkeygen"
        versionCode 42
        versionName "4.0.2"
        minSdkVersion 16
        targetSdkVersion 27
        multiDexEnabled false

        externalNativeBuild {
            ndkBuild {
                // Passes an optional argument to ndk-build.
                arguments "V=1"
                // Specifies the ABI configurations of your native
                // libraries Gradle should build and package with your APK.
                abiFilters 'x86', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    flavorDimensions "tier"
    productFlavors {
        github {
            dimension "tier"
            applicationId "org.exobel.routerkeygen"
        }
        googleplay {
            dimension "tier"
            applicationId "io.github.routerkeygen"
        }
    }



    lintOptions {
        abortOnError false
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['arm64-v8a': 1, 'armeabi': 2, x86: 3, 'armeabi-v7a': 4]

// For per-density APKs, create a similar map like this:
// ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}


dependencies {
    implementation project(':aFileChooser')
    implementation(name: 'android-ad-sdk', ext: 'aar')

    implementation 'com.android.support:support-compat:27.0.1'
    implementation 'com.android.support:support-core-ui:27.0.1'
    implementation 'com.android.support:support-core-utils:27.0.1'
    implementation 'com.android.support:support-fragment:27.0.1'

    implementation('com.google.android.gms:play-services-location:11.6.0', {
        exclude module: 'support-v4'
    })
    implementation('com.google.android.gms:play-services-analytics:11.6.0', {
        exclude module: 'support-v4'
    })
    implementation('ch.acra:acra:4.9.0', { exclude module: 'support-v4' })
    testImplementation 'junit:junit:4.12'
}
